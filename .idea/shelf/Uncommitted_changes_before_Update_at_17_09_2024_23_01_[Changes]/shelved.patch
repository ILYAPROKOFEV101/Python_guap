Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This is a sample Python script.\r\n\r\n# Press Shift+F10 to execute it or replace it with your code.\r\n# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\r\nfrom datetime import datetime\r\nfrom unittest import result\r\n\r\n\r\n#Вывести на экран пять строк из нулей, количество нулей\r\n# в каждой строке равно номеру строки, нули между собой разделять точкой с запятой.\r\ndef two_1 ():\r\n    i = 1\r\n    for i in range(0, 6):\r\n        print(\"0\" * i)\r\n#(x+1)2+3(x+1) при x =1.7.\r\ndef math_two():\r\n    x = 1.7  # Присваиваем значение переменной x\r\n    result = (x + 1) ** 2 + 3 * (x + 1)  # Вычисляем выражение\r\n    print(result)  # Выводим результат\r\ndef eight():\r\n    rect_width = 647\r\n    rect_height = 170\r\n    square_side = 30\r\n\r\n    # Рассчитаем количество квадратов по ширине и высоте\r\n    squares_per_width = rect_width // square_side\r\n    squares_per_height = rect_height // square_side\r\n\r\n    # Общее количество квадратов\r\n    total_squares = squares_per_width * squares_per_height\r\n\r\n    # Форматированный вывод\r\n    print(\r\n        f\"Прямоугольник размером {rect_width}x{rect_height} \"\r\n        f\"вмещает {total_squares} квадратов со стороной {square_side}.\"\r\n    )\r\ndef print_w():\r\n    height = 4\r\n    for i in range(height):\r\n        if i == 0:\r\n            print(\"*     *     *\")\r\n        elif i == 1:\r\n            print(\" *   * *   * \")\r\n\r\n        elif i == 2:\r\n            print(\"  * *   * *  \")\r\n        elif i == 3:\r\n            print(\"   *     *   \")\r\ndef math_fore(a):\r\n    # a^2 за 1 операцию\r\n    a2 = a * a\r\n    # a^4 за 2 операции\r\n    a4 = a2 * a2\r\n    # a^6 за 3 операции\r\n    a6 = a4 * a2\r\n    # a^3 за 2 операции (нужно для a^15)\r\n    a3 = a2 * a\r\n    # a^6 уже посчитано (3-я операция), a^12 за 4 операции\r\n    a12 = a6 * a6\r\n    # a^15 за 5 операций\r\n    a15 = a12 * a3\r\n\r\n    return a4, a6, a15\r\ndef math_six():\r\n    # Ввод данных от пользователя\r\n    principal = float(input(\"Введите начальную сумму вклада: \"))\r\n    annual_rate = float(input(\"Введите годовой процент: \"))\r\n    years = 5  # В данном случае фиксированное количество лет\r\n\r\n    # Вычисление суммы вклада через 5 лет\r\n    future_value = principal * (1 + annual_rate / 100) ** years\r\n\r\n    print(f\"Сумма вклада через {years} лет составит: {future_value:.2f}\")\r\ndef opiration_2():\r\n    # Ввод четырех чисел от пользователя\r\n    try:\r\n        numbers = [int(input(f\"Введите число {i + 1}: \")) for i in range(4)]\r\n\r\n        # Фильтрация четных чисел\r\n        even_numbers = [num for num in numbers if num % 2 == 0]\r\n\r\n        # Поиск наибольшего четного числа\r\n        if even_numbers:\r\n            largest_even = max(even_numbers)\r\n            print(f\"Наибольшее четное число: {largest_even}\")\r\n        else:\r\n            print(\"Четные числа не найдены\")\r\n    except ValueError:\r\n        print(\"Пожалуйста, введите корректное число\")\r\ndef check_date():\r\n    # Запрашиваем у пользователя день, месяц и год и преобразуем их в целые числа\r\n    day = int(input(\"Введите день: \"))\r\n    month = int(input(\"Введите месяц: \"))\r\n    year = int(input(\"Введите год: \"))\r\n\r\n    # Создаем словарь, в котором хранятся количество дней в каждом месяце\r\n    # Например, в месяце 1 (январь) 31 день, в месяце 2 (февраль) 28 дней и так далее\r\n    days_in_month = {\r\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\r\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\r\n    }\r\n\r\n    # Проверяем, что введенный месяц находится в допустимом диапазоне от 1 до 12\r\n    # Если месяц меньше 1 или больше 12, выводим \"no\" и прекращаем выполнение функции\r\n    if month < 1 or month > 12:\r\n        print(\"no\")\r\n        return\r\n\r\n    # Проверяем, что введенный день находится в допустимом диапазоне для указанного месяца\r\n    # Если день меньше 1 или больше количества дней в указанном месяце, выводим \"no\" и прекращаем выполнение функции\r\n    if day < 1 or day > days_in_month[month]:\r\n        print(\"no\")\r\n        return\r\n\r\n    # Попытка создать объект даты с помощью класса datetime\r\n    # Если дата корректна, то объект успешно создастся, и мы выведем \"yes\"\r\n    # Если дата некорректна (например, 30 февраля), то будет вызвано исключение ValueError\r\n    # В этом случае выводим \"no\"\r\n    try:\r\n        datetime(year, month, day)\r\n        print(\"yes\")\r\n    except ValueError:\r\n        print(\"no\")\r\ndef fivenumber():\r\n    number = input(\"Ведите число: \")\r\n\r\n    if len(number) != 5:\r\n        return \"Ошибка: число должно быть пятизначным\"\r\n\r\n    result = []\r\n\r\n    for i, digit in enumerate(number):\r\n        if i % 2 == 0:\r\n            result.append('0')\r\n        else:\r\n            result.append(digit)\r\n\r\n# преобразую список, где хранятся данные в строку для вывода\r\n    print(''.join(result))\r\n\r\n\r\n\r\n# Press the green button in the gutter to run the script.\r\nif __name__ == '__main__':\r\n       #two_1()\r\n    #print_w()\r\n     #  math_two()\r\n     #  eight()\r\n   # print(math_fore(2))\r\n     #  math_six()\r\n        #opiration_2()\r\n      # check_date()\r\n      fivenumber()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -121,6 +121,7 @@
         print("yes")
     except ValueError:
         print("no")
+
 def fivenumber():
     number = input("Ведите число: ")
 
