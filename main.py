# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
from datetime import datetime
from unittest import result
import random

from console import two_1, print_w
from mathtest import math_two, math_fore, math_six, eight

"""
Пользователь вводит четыре числа. Найдите наибольшее четное число среди них.
Если оно не существует, выведите фразу "not found" 
"""
def opiration_2():
    # Ввод четырех чисел от пользователя
    try:
        numbers = [int(input(f"Введите число {i + 1}: ")) for i in range(4)]

        # Фильтрация четных чисел
        even_numbers = [num for num in numbers if num % 2 == 0]

        # Поиск наибольшего четного числа
        if even_numbers:
            largest_even = max(even_numbers)
            print(f"Наибольшее четное число: {largest_even}")
        else:
            print("not found")
    except ValueError:
        print("Пожалуйста, введите корректное число")



"""
Дана дата из трех чисел (день, месяц и год). Вывести yes, если такая дата существует (например, 12 02 1999 - yes, 22 13 2001 - no). 
Считать, что в феврале всегда 28 дней. 
"""
def check_date():
    # Запрашиваем у пользователя день, месяц и год и преобразуем их в целые числа
    day = int(input("Введите день: "))
    month = int(input("Введите месяц: "))
    year = int(input("Введите год: "))

    #  словарь, в котором хранятся количество дней в каждом месяце

    days_in_month = {
        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,
        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31
    }


    if month < 1 or month > 12:
        print("нет")
        return

    if day < 1 or day > days_in_month[month]:
        print("нет")
        return


    try:
        datetime(year, month, day)
        print("да")
    except ValueError:
        print("да")


"""
Дано пятизначное число. Цифры на четных позициях обнулить. Например, из 12345 получается число 10305. 
"""
def fivenumber():
    number = input("Ведите пятизначное число: ")

    if len(number) == 52:

        result = []

        for i, digit in enumerate(number):
            if i % 2 == 0:
                result.append('0')
            else:
                result.append(digit)

            # преобразую список, где хранятся данные в строку для вывода
                print(''.join(result))

    else:
        print( "Ошибка: число должно быть пятизначным")





"""
аны два прямоугольника, стороны которых параллельны или перпендикулярны осям координат. 
Известны координаты левого нижнего угла каждого из них и длины их сторон. Один из прямоугольников назовем первым, другой — вторым. 
а) Определить, принадлежат ли все точки первого прямоугольника второму. 
б) Определить, принадлежат ли все точки одного из прямоугольников другому. 
в) Определить, пересекаются ли эти прямоугольники. 
"""
def check_rectangles():
    # Запрашиваем координаты и размеры первого прямоугольника
    print("Введите координаты левого нижнего угла и размеры первого прямоугольника:")
    x1 = float(input("x1: "))
    y1 = float(input("y1: "))
    w1 = float(input("Ширина первого прямоугольника: "))
    h1 = float(input("Высота первого прямоугольника: "))

    # Запрашиваем координаты и размеры второго прямоугольника
    print("Введите координаты левого нижнего угла и размеры второго прямоугольника:")
    x2 = float(input("x2: "))
    y2 = float(input("y2: "))
    w2 = float(input("Ширина второго прямоугольника: "))
    h2 = float(input("Высота второго прямоугольника: "))

    # Проверка, принадлежат ли все точки первого прямоугольника второму
    rect1_in_rect2 = (x1 >= x2 and y1 >= y2 and (x1 + w1) <= (x2 + w2) and (y1 + h1) <= (y2 + h2))

    # Проверка, принадлежат ли все точки второго прямоугольника первому
    rect2_in_rect1 = (x2 >= x1 and y2 >= y1 and (x2 + w2) <= (x1 + w1) and (y2 + h2) <= (y1 + h1))

    # Проверка пересечения прямоугольников
    intersect = not (x1 + w1 <= x2 or x1 >= x2 + w2 or y1 + h1 <= y2 or y1 >= y2 + h2)

    # Вывод результатов
    print(f"Все точки первого прямоугольника принадлежат второму: {rect1_in_rect2}")
    print(f"Все точки второго прямоугольника принадлежат первому: {rect2_in_rect1}")
    print(f"Прямоугольники пересекаются: {intersect}")



"""
Пользователь вводит курс доллара в рублях. Показать таблицу цен 1$, 2$, ..., 100$ в рублях,
 третьим столбцом добавить количество кг конфет, которые можно купить на данные суммы, если цена 1 кг конфет равна 20 руб.
  Пример: 1$ - 70 р - 3.5 кг и так далее (всего 100 строк). 
"""
def dollar_to_rubles_table():
    # Запрос курса доллара
    dollar_rate = float(input("Введите курс доллара в рублях: "))
    candy_price_kg = 20.0  # Цена 1 кг конфет в рублях

    # Вывод заголовков таблицы
    print(f"{'Доллары':<10}{'Рубли':<10}{'Кг конфет':<10}")
    print("-" * 30)

    # Вычисляем и выводим для каждого значения от 1 до 100 долларов
    for dollars in range(1, 101):
        rubles = dollars * dollar_rate  # Сумма в рублях
        candies = rubles / candy_price_kg  # Количество килограммов конфет
        print(f"{dollars:<10}{rubles:<10.2f}{candies:<10.2f}")


"""
Выведите на экран квадрат из нулей и единиц, 
причем нули находятся только на диагонали квадрата. Всего в квадрате сто цифр.   
"""
def print_square():
    size = 10

    for i in range(size):
        for j in range(size):
            if i == j or i + j == size - 1:
                print(0, end=" ")  # Нули на диагонали
            else:
                print(1, end=" ")  # Единицы вне диагонали
        print()  # Переход на новую строку



"""
Пользователь вводит ненулевые целые числа до тех пор, 
пока не введет ноль. Найдите количество четных чисел, которые он ввел. 
"""

def count_even_numbers():
        count = 0  # Счетчик четных чисел
        while True:
            num = int(input("Введите целое число (0 для завершения): "))
            if num == 0:
                break  # Прерываем цикл, если введен 0
            if num % 2 == 0:
                count += 1  # Увеличиваем счетчик, если число четное
        print(f"Количество четных чисел: {count}")


"""
Реализуйте серию из n игр "Камень, Ножницы, Бумага" с компьютером.
По завершении серии игр программа должна вывести статистику:
1. Сколько игр выиграл пользователь.
2. Сколько игр выиграл компьютер.
3. Сколько было ничьих.
4. Сколько раз пользователь и компьютер выбрали каждый из возможных ходов (Камень, Ножницы, Бумага).
В игру добавлен анализ ходов пользователя: компьютер выбирает свой ход на основе статистики ходов пользователя, 
подбирая наиболее эффективный против пользователя ход.
"""



# Варианты ходов (список возможных ходов для игры "Камень, Ножницы, Бумага")
moves = ['Камень', 'Ножницы', 'Бумага']




def play_knb():
    # Количество раундов, которое пользователь хочет сыграть
    n = int(input("Сколько игр вы хотите сыграть? "))

    # Инициализация переменных для подсчета побед и ничьих
    user_wins = 0  # количество побед пользователя
    computer_wins = 0  # количество побед компьютера
    draws = 0  # количество ничьих

    # Словари для хранения количества выборов каждого хода пользователем и компьютером
    user_choices = {'Камень': 0, 'Ножницы': 0, 'Бумага': 0}
    computer_choices = {'Камень': 0, 'Ножницы': 0, 'Бумага': 0}

    # Функция для выбора хода компьютера
    def computer_move():
        # Анализ частоты ходов пользователя: компьютер выбирает ход, который побеждает наиболее частый выбор пользователя
        if user_choices['Камень'] > user_choices['Ножницы'] and user_choices['Камень'] > user_choices['Бумага']:
            return 'Бумага'  # Бумага бьет Камень
        elif user_choices['Ножницы'] > user_choices['Камень'] and user_choices['Ножницы'] > user_choices['Бумага']:
            return 'Камень'  # Камень бьет Ножницы
        elif user_choices['Бумага'] > user_choices['Камень'] and user_choices['Бумага'] > user_choices['Ножницы']:
            return 'Ножницы'  # Ножницы бьют Бумагу
        else:
            return random.choice(moves)  # Если у пользователя нет доминирующего хода, компьютер выбирает случайно

    # Основной цикл игры (n раундов)
    for i in range(n):
        print("\nИгра", i + 1)  # выводим текущий номер раунда
        print("Выберите ваш ход:")
        print("1 - Камень")
        print("2 - Ножницы")
        print("3 - Бумага")

        # Получаем выбор пользователя
        user_input = int(input("Ваш выбор (1/2/3): "))
        if user_input not in [1, 2, 3]:  # проверяем, правильный ли ввод
            print("Неправильный ввод, попробуйте снова.")
            continue  # если ввод неправильный, просим повторить

        user_move = moves[user_input - 1]  # преобразуем выбор пользователя в строку ("Камень", "Ножницы", "Бумага")
        user_choices[user_move] += 1  # обновляем статистику ходов пользователя

        comp_move = computer_move()  # компьютер делает свой ход
        computer_choices[comp_move] += 1  # обновляем статистику ходов компьютера

        print(f"Ваш ход: {user_move}")
        print(f"Ход компьютера: {comp_move}")

        # Определение результата раунда
        if user_move == comp_move:
            print("Ничья!")
            draws += 1  # если ходы совпали, это ничья
        elif (user_move == 'Камень' and comp_move == 'Ножницы') or \
                (user_move == 'Ножницы' and comp_move == 'Бумага') or \
                (user_move == 'Бумага' and comp_move == 'Камень'):
            print("Вы выиграли!")
            user_wins += 1  # если пользователь выиграл, увеличиваем счетчик его побед
        else:
            print("Компьютер выиграл!")
            computer_wins += 1  # если компьютер выиграл, увеличиваем счетчик побед компьютера

    # Вывод статистики по завершении всех раундов
    print("\n--- Статистика ---")
    print(f"Победы пользователя: {user_wins}")
    print(f"Победы компьютера: {computer_wins}")
    print(f"Ничьи: {draws}")

    # Вывод количества выборов каждого хода пользователем и компьютером
    print("\nХоды пользователя:")
    for move, count in user_choices.items():
        print(f"{move}: {count}")

    print("\nХоды компьютера:")
    for move, count in computer_choices.items():
        print(f"{move}: {count}")


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    #Работа с консолью
   #two_1()
   # print_w()

#Простейшая арифметика
 #math_two()
  #  math_fore()

    #  math_six()
    # eight()

#Условный оператор
      #  opiration_2()
      # check_date()
 #  fivenumber()
   #   check_rectangles()

       #Циклы
     #  dollar_to_rubles_table()
     #  print_square()
      # count_even_numbers()
       play_knb()








